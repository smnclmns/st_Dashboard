{"version":3,"sources":["StreamlitTimeline.tsx","index.tsx"],"names":["StreamlitTimeline","state","numClicks","isFocused","render","options","JSON","parse","props","args","items","groups","theme","style","borderStyling","primaryColor","border","outline","selectHandler","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"+OAiBMA,E,4MACGC,MAAQ,CAAEC,UAAW,EAAGC,WAAW,G,EAEnCC,OAAS,WAId,IAAMC,EAAUC,KAAKC,MAAM,EAAKC,MAAMC,KAAX,SACrBC,EAAQJ,KAAKC,MAAM,EAAKC,MAAMC,KAAX,OACnBE,EAASL,KAAKC,MAAM,EAAKC,MAAMC,KAAX,QAQlBG,EAAU,EAAKJ,MAAfI,MACFC,EAA6B,GAInC,GAAID,EAAO,CAGT,IAAME,EAAa,oBACjB,EAAKb,MAAME,UAAYS,EAAMG,aAAe,QAE9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAGlB,OACE,8BACE,kBAAC,IAAD,CACET,QAASA,EACTK,MAAOA,EACPC,OAAQA,EAMRO,cAAe,SAACV,GAAD,OAAgBW,IAAUC,kBAAkBZ,EAAME,MAAM,S,yBA3CjDW,KAwDjBC,cAAwBtB,GCrEvCuB,IAASnB,OACP,kBAAC,IAAMoB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.46d91172.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport Timeline from \"react-visjs-timeline\";\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass StreamlitTimeline extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const options = JSON.parse(this.props.args[\"options\"]);\n    const items = JSON.parse(this.props.args[\"items\"]);\n    const groups = JSON.parse(this.props.args[\"groups\"]);\n    // console.log(JSON.parse(name));\n\n    // const options = this.props.args[\"options\"];\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <Timeline\n          options={options}\n          items={items}\n          groups={groups}\n          // clickHander={this.onClicked}\n          // selectHandler={this.onClicked}\n          // rangechangeHandler={rangeChangeHandler}\n          // clickHander={(props: any) => console.log(props)}\n          // selectHandler={(props: any) => console.log(props.items[0])}\n          selectHandler={(props: any) => Streamlit.setComponentValue(props.items[0])}\n        />\n      </span>\n    );\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StreamlitTimeline)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitTimeline from \"./StreamlitTimeline\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitTimeline />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}